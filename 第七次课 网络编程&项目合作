# 第七次课 网络编程&项目合作

## 📘前言

到目前为止，我们已经可以写出一个漂亮的前端页面了，但是不管怎么看，我们好像都在玩单机，最多跑在localhost上，无法让别人看，也无法和后端的小伙伴🤺

所以，这节课我们将学习如何摆脱自娱自乐，开始融入真正的互联网世界，另外我们还需要知道如何与后端的小伙伴一起开黑🎮！

## 基础储备

首先我们得先了解网络得一些基础知识

👻什么是网络请求？

- 网络请求就是一台电脑（客户端）与另一台电脑（服务器）对话的过程
  
- 其实当在地址栏输入一个网址（URL）按下回车时就是一个简单的网络**请求**，你看到的页面就是服务器**响应**给你的。
  
- 我们可以通过js**发**起网络请求得到**响应**。（怎么发？稍后再说）
  

![](file://C:\Users\Lenovo\AppData\Roaming\marktext\images\2022-11-25-14-41-51-image.png?msec=1669358511747)

### HTTP

**超文本传输<mark>协议</mark>（Hyper Text Transfer Protocol，HTTP）是一个简单的<mark>请求</mark>-<mark>响应</mark>协议。**

👀为什么需要协议？

如果没有协议，计算机和计算机之间传递信息，就像广东人（粤语）和福建人（闽南语）无法正常交流一样，但是如果都说普通话就不是问题，http就如计算机普通话一样，规定了传递信息的格式，也就是一种协议。

#### 请求头

当你发起一个网络请求时，你应该把你想请求的相关信息按照http的格式写在请求头里面，

它大概长这样

![](file://C:\Users\Lenovo\AppData\Roaming\marktext\images\2022-11-25-15-13-03-image.png?msec=1669360383686)

是不是看起来就兴致全无了

其实，我们只用手动添加个别字段，浏览器会帮我们封装好默认字段。

我们现在也不需要了解每一个字段的一样，但是常用的我们得知道。

##### 请求方法

上图圈起来的就是其中一种常用的请求方法，而且我们经常要手动设置，他们有不少...

| 请求方法 | 描述  | 请求方法 | 描述  |
| --- | --- | --- | --- |
| GET | 请求指定的页面信息，并返回实体主体。 | CONNECT | HTTP/1.1 协议中预留给能够将连接改为管道方式的代理服务器。 |
| HEAD | 类似于 GET 请求，只不过返回的响应中没有具体的内容，用于获取报头 | OPTIONS | 允许客户端查看服务器的性能。 |
| POST | 向指定资源提交数据进行处理请求（例如提交表单或者上传文件）。数据被包含在请求体中。POST 请求可能会导致新的资源的建立和/或已有资源的修改 | TRACE | 回显服务器收到的请求，主要用于测试或诊断。 |
| PUT | 从客户端向服务器传送的数据取代指定的文档的内容。 | PATCH | 是对 PUT 方法的补充，用来对已知资源进行局部更新 |
| DELETE | 请求服务器删除指定的页面。 |     |     |

#### 请求体

当你的请求方法是POST时

你可以把你想要发送给服务器的数据放在body里面

你发送的数据可以是字符串（json），二进制数据，`FormData` 对象

详细后面再说

#### 响应头

他们通常长这样

![](file://C:\Users\Lenovo\AppData\Roaming\marktext\images\2022-11-25-15-27-25-image.png?msec=1669361245727)

响应头一般是后端的小伙伴设置的，包含着响应的相关信息

#### 状态码

上图圈出的200就是常见的表示成功的状态码

它表示着响应的状态（成功，失败，报错等等）

| 状态码 | 描述  |
| --- | --- |
| 100~199 | 信息，服务器收到请求，需要请求者继续执行操作 |
| 200~299 | 成功，操作被成功接收并处理 |
| 300~399 | 重定向，需要进一步的操作以完成请求 |
| 400~499 | 客户端错误，请求包含语法错误或无法完成请求 |
| 500~599 | 服务器错误，服务器在处理请求的过程中发生了错误 |

常见的状态码有

200 ——成功响应

304——缓存

404——未找到响应资源

403——服务器拒绝响应

500——服务端错误
